---
import { Image } from "astro:assets";

const imageImports = import.meta.glob<{ default: ImageMetadata }>(
  "../images/portfolio/*.jpeg",
  { eager: true },
);
const images = Object.values(imageImports);
function parseImageURL(url: string) {
  // Captura el fragmento entre la última "/" y la extensión (soporta jpg/jpeg/png/webp/gif/avif)
  const regex = /\/([^\/]+?)\.(?:jpe?g|png|webp|gif|avif)(?:\?|$)/i;
  const match = url.match(regex);
  if (!match) throw new Error(`URL de imagen inválida: ${url}`);

  const filename = match[1]; // p.ej. "010-tall-esquina curiosa"
  const parts = filename.split("-");
  const order = parts.shift() ?? "";
  const size = parts.shift() ?? "";
  // El resto conforma el alt; unir por espacios (y limpiar espacios extra)
  const alt = parts.length ? parts.join(" ").replace(/\s+/g, " ").trim() : "";

  return { filename, order, size, alt };
}
const portfolioImages = images.map((image) => {
  const { size, alt } = parseImageURL(image.default.src);
  return {
    src: image.default, // This is the full ImageMetadata object
    alt: alt,
    size: size,
  };
});
---

<section class="portfolio-grid">
  <div class="container">
    <div class="grid">
      {
        portfolioImages.map((image, index) => (
          <div class={`grid-item ${image.size}`} data-index={index}>
            <Image
              src={image.src}
              alt={image.alt}
              width={600}
              height={600}
              loading="lazy"
            />
            <div class="overlay">
              <span class="view-text">View</span>
            </div>
          </div>
        ))
      }
    </div>
  </div>

  <!-- Lightbox modal -->
  <div class="lightbox" id="lightbox">
    <div class="lightbox-content">
      <button class="lightbox-close" aria-label="Close lightbox">
        <span class="close-line"></span>
        <span class="close-line"></span>
      </button>
      <img src="" alt="" class="lightbox-image" />
      <div class="lightbox-navigation">
        <button class="nav-btn prev" aria-label="Previous image">‹</button>
        <button class="nav-btn next" aria-label="Next image">›</button>
      </div>
    </div>
  </div>
</section>

<style>
  .portfolio-grid {
    padding: 4rem 0;
    min-height: 100vh;
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    grid-auto-rows: 250px;
    grid-auto-flow: dense;
  }

  .grid-item {
    position: relative;
    overflow: hidden;
    cursor: pointer;
    border-radius: 2px;
    transition: transform 0.3s ease;
  }

  .grid-item:hover {
    transform: scale(1.02);
  }

  /* Grid item sizes */
  .grid-item.large {
    grid-column: span 2;
    grid-row: span 2;
  }

  .grid-item.wide {
    grid-column: span 2;
  }

  .grid-item.tall {
    grid-row: span 2;
  }

  .grid-item.square {
    /* Default single cell */
  }

  .grid-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    filter: grayscale(100%) contrast(1.1);
    transition: transform 0.5s ease;
  }

  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .grid-item:hover .overlay {
    opacity: 1;
  }

  .view-text {
    color: white;
    font-size: 1.2rem;
    font-weight: 300;
    letter-spacing: 0.1em;
    text-transform: uppercase;
  }

  /* Lightbox styles */
  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.95);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 2000;
  }

  .lightbox.active {
    opacity: 1;
    visibility: visible;
  }

  .lightbox-content {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
  }

  .lightbox-image {
    max-width: 100%;
    max-height: 80vh;
    object-fit: contain;
    filter: grayscale(100%) contrast(1.1);
  }

  .lightbox-close {
    position: absolute;
    top: -3rem;
    right: 0;
    width: 30px;
    height: 30px;
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0;
  }

  .close-line {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100%;
    height: 2px;
    background-color: white;
    transform-origin: center;
  }

  .close-line:first-child {
    transform: translate(-50%, -50%) rotate(45deg);
  }

  .close-line:last-child {
    transform: translate(-50%, -50%) rotate(-45deg);
  }

  .lightbox-close:hover .close-line {
    opacity: 0.7;
  }

  .lightbox-navigation {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 100%;
    display: flex;
    justify-content: space-between;
    padding: 0 -3rem;
    pointer-events: none;
  }

  .nav-btn {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    pointer-events: auto;
    margin: -20px;
  }

  .nav-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.5);
  }

  .nav-btn.prev {
    transform: translateX(-100%);
  }

  .nav-btn.next {
    transform: translateX(100%);
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .portfolio-grid {
      padding: 2rem 0;
    }

    .grid {
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      grid-auto-rows: 200px;
    }

    /* .grid-item.large,
    .grid-item.wide {
      grid-column: span 1;
    }

    .grid-item.large,
    .grid-item.tall {
      grid-row: span 1;
    } */

    .lightbox-close {
      top: -2rem;
      width: 25px;
      height: 25px;
    }

    .nav-btn {
      width: 40px;
      height: 40px;
      font-size: 1.2rem;
    }
  }

  @media (max-width: 480px) {
    .grid {
      grid-auto-rows: 150px;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const gridItems = document.querySelectorAll(".grid-item");
    const lightbox = document.getElementById("lightbox");
    const lightboxImage = lightbox?.querySelector(
      ".lightbox-image",
    ) as HTMLImageElement;
    const lightboxClose = lightbox?.querySelector(".lightbox-close");
    const prevBtn = lightbox?.querySelector(".prev");
    const nextBtn = lightbox?.querySelector(".next");

    let currentImageIndex = 0;
    const images = Array.from(gridItems).map((item) => {
      const img = item.querySelector("img") as HTMLImageElement;
      return {
        src: img.src,
        alt: img.alt,
      };
    });

    function openLightbox(index: number) {
      if (!lightbox || !lightboxImage) return;

      currentImageIndex = index;
      lightboxImage.src = images[index].src;
      lightboxImage.alt = images[index].alt;
      lightbox.classList.add("active");
      document.body.style.overflow = "hidden";
    }

    function closeLightbox() {
      if (!lightbox) return;

      lightbox.classList.remove("active");
      document.body.style.overflow = "";
    }

    function showPreviousImage() {
      currentImageIndex =
        currentImageIndex === 0 ? images.length - 1 : currentImageIndex - 1;
      if (lightboxImage) {
        lightboxImage.src = images[currentImageIndex].src;
        lightboxImage.alt = images[currentImageIndex].alt;
      }
    }

    function showNextImage() {
      currentImageIndex =
        currentImageIndex === images.length - 1 ? 0 : currentImageIndex + 1;
      if (lightboxImage) {
        lightboxImage.src = images[currentImageIndex].src;
        lightboxImage.alt = images[currentImageIndex].alt;
      }
    }

    // Event listeners
    gridItems.forEach((item, index) => {
      item.addEventListener("click", () => openLightbox(index));
    });

    lightboxClose?.addEventListener("click", closeLightbox);
    prevBtn?.addEventListener("click", showPreviousImage);
    nextBtn?.addEventListener("click", showNextImage);

    // Close lightbox when clicking on background
    lightbox?.addEventListener("click", (e) => {
      if (e.target === lightbox) {
        closeLightbox();
      }
    });

    // Keyboard navigation
    document.addEventListener("keydown", (e) => {
      if (!lightbox?.classList.contains("active")) return;

      switch (e.key) {
        case "Escape":
          closeLightbox();
          break;
        case "ArrowLeft":
          showPreviousImage();
          break;
        case "ArrowRight":
          showNextImage();
          break;
      }
    });
  });
</script>
