---
import { Image } from "astro:assets";

// Hero slideshow component for the homepage
const imageImports = import.meta.glob<{ default: ImageMetadata }>(
  "../images/home/*.jpeg",
  { eager: true },
);
const images = Object.values(imageImports);
---

<section class="hero-slideshow">
  <div class="slideshow-container">
    {
      images.map((image, index) => (
        <div class={`slide ${index === 0 ? "active" : ""}`} data-slide={index}>
          <Image
            src={image.default}
            alt={`Home Image ${index}`}
            width={1200}
            height={720}
            format="webp"
            loading={index === 0 ? "eager" : "lazy"}
            style="width:100%;height:100%;object-fit:cover;object-position:center;filter:grayscale(100%) contrast(1.1);"
            quality={80}
          />
        </div>
      ))
    }
  </div>

  <!-- Slide indicators -->
  <div class="slide-indicators">
    {
      images.map((_, index) => (
        <button
          class={`indicator ${index === 0 ? "active" : ""}`}
          data-slide={index}
          aria-label={`Go to slide ${index + 1}`}
        />
      ))
    }
  </div>
</section>

<style>
  .hero-slideshow {
    position: relative;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    /* padding: 6vh; */
  }

  .slideshow-container {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 1s ease-in-out;
  }

  .slide.active {
    opacity: 1;
  }

  .slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    filter: grayscale(100%) contrast(1.1);
  }

  /* Slide indicators */
  .slide-indicators {
    position: absolute;
    bottom: 3rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 1rem;
    z-index: 10;
  }

  .indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: 2px solid rgba(255, 255, 255, 0.6);
    background: transparent;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .indicator:hover,
  .indicator.active {
    background: rgba(255, 255, 255, 0.9);
    border-color: rgba(255, 255, 255, 0.9);
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .slide-indicators {
      bottom: 2rem;
      gap: 0.75rem;
    }

    .indicator {
      width: 10px;
      height: 10px;
    }
  }

  /* Performance optimizations */
  .slide img {
    will-change: transform;
  }

  .slideshow-container {
    will-change: transform;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const slides = document.querySelectorAll(".slide");
    const indicators = document.querySelectorAll(".indicator");
    let currentSlide = 0;
    let slideInterval: NodeJS.Timeout;

    function showSlide(index: number) {
      // Remove active class from all slides and indicators
      slides.forEach((slide) => slide.classList.remove("active"));
      indicators.forEach((indicator) => indicator.classList.remove("active"));

      // Add active class to current slide and indicator
      slides[index]?.classList.add("active");
      indicators[index]?.classList.add("active");

      currentSlide = index;
    }

    function nextSlide() {
      const next = (currentSlide + 1) % slides.length;
      showSlide(next);
    }

    function startSlideshow() {
      slideInterval = setInterval(nextSlide, 3000); // 3 seconds
    }

    function stopSlideshow() {
      clearInterval(slideInterval);
    }

    // Initialize slideshow
    startSlideshow();

    // Add click handlers to indicators
    indicators.forEach((indicator, index) => {
      indicator.addEventListener("click", () => {
        showSlide(index);
        stopSlideshow();
        startSlideshow(); // Restart timer
      });
    });

    // Pause slideshow on hover
    const slideshowContainer = document.querySelector(".slideshow-container");
    slideshowContainer?.addEventListener("mouseenter", stopSlideshow);
    slideshowContainer?.addEventListener("mouseleave", startSlideshow);

    // Pause slideshow when page is not visible
    document.addEventListener("visibilitychange", () => {
      if (document.hidden) {
        stopSlideshow();
      } else {
        startSlideshow();
      }
    });

    // Keyboard navigation
    document.addEventListener("keydown", (e) => {
      if (e.key === "ArrowLeft") {
        const prev = currentSlide === 0 ? slides.length - 1 : currentSlide - 1;
        showSlide(prev);
        stopSlideshow();
        startSlideshow();
      } else if (e.key === "ArrowRight") {
        nextSlide();
        stopSlideshow();
        startSlideshow();
      }
    });
  });
</script>
